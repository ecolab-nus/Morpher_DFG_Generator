digraph "CFG for 'MadgwickAHRSupdateIMU' function" {
	label="CFG for 'MadgwickAHRSupdateIMU' function";

	Node0x55b7582339c0 [shape=record,label="{entry:\l  %vla = alloca i32, i32 %length, align 4\l  %vla1 = alloca i32, i32 %length, align 4\l  %vla2 = alloca i32, i32 %length, align 4\l  %vla3 = alloca i32, i32 %length, align 4\l  %vla4 = alloca i32, i32 %length, align 4\l  %vla5 = alloca i32, i32 %length, align 4\l  br label %for.body\l}"];
	Node0x55b7582339c0 -> Node0x55b758233ab0;
	Node0x55b758233a10 [shape=record,label="{for.cond.cleanup:                                 \l  %manupa0 = load volatile float, float* @q0, align 4, !tbaa !3\l  %call = tail call i32 @float_to_fr32(float %manupa0)\l  %manupa1 = load volatile float, float* @q1, align 4, !tbaa !3\l  %call7 = tail call i32 @float_to_fr32(float %manupa1)\l  %manupa2 = load volatile float, float* @q2, align 4, !tbaa !3\l  %call8 = tail call i32 @float_to_fr32(float %manupa2)\l  %manupa3 = load volatile float, float* @q3, align 4, !tbaa !3\l  %call9 = tail call i32 @float_to_fr32(float %manupa3)\l  %cmp11683 = icmp sgt i32 %length, 0\l  br i1 %cmp11683, label %for.body13.preheader, label %for.cond.cleanup60\l|{<s0>T|<s1>F}}"];
	Node0x55b758233a10:s0 -> Node0x55b758233a60;
	Node0x55b758233a10:s1 -> Node0x55b758233bf0;
	Node0x55b758233a60 [shape=record,label="{for.body13.preheader:                             \l  br label %for.body13\l}"];
	Node0x55b758233a60 -> Node0x55b758233b00;
	Node0x55b758233ab0 [shape=record,label="{for.body:                                         \l  %i.0685 = phi i32 [ 0, %entry ], [ %inc, %for.body ]\l  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]*\l... @MadgwickAHRSupdateIMU.MultiplyDeBruijnBitPosition, i32 0, i32 %i.0685\l  %manupa4 = load i32, i32* %arrayidx, align 4, !tbaa !7\l  %sub = add nsw i32 %manupa4, -15\l  store i32 %sub, i32* %arrayidx, align 4, !tbaa !7\l  %inc = add nuw nsw i32 %i.0685, 1\l  %exitcond687 = icmp eq i32 %inc, 32\l  br i1 %exitcond687, label %for.cond.cleanup, label %for.body\l|{<s0>T|<s1>F}}"];
	Node0x55b758233ab0:s0 -> Node0x55b758233a10;
	Node0x55b758233ab0:s1 -> Node0x55b758233ab0;
	Node0x55b758233b00 [shape=record,label="{for.body13:                                       \l  %iter.0684 = phi i32 [ %inc54, %for.body13 ], [ 0, %for.body13.preheader ]\l  %arrayidx14 = getelementptr inbounds float, float* %axf, i32 %iter.0684\l  %manupa5 = load float, float* %arrayidx14, align 4, !tbaa !3\l  %mul = fmul float %manupa5, %manupa5\l  %arrayidx16 = getelementptr inbounds float, float* %ayf, i32 %iter.0684\l  %manupa6 = load float, float* %arrayidx16, align 4, !tbaa !3\l  %mul18 = fmul float %manupa6, %manupa6\l  %add = fadd float %mul, %mul18\l  %arrayidx19 = getelementptr inbounds float, float* %azf, i32 %iter.0684\l  %manupa7 = load float, float* %arrayidx19, align 4, !tbaa !3\l  %mul21 = fmul float %manupa7, %manupa7\l  %add22 = fadd float %add, %mul21\l  %call23 = tail call float @invSqrt(float %add22)\l  %mul25 = fmul float %manupa5, %call23\l  store float %mul25, float* %arrayidx14, align 4, !tbaa !3\l  %manupa8 = load float, float* %arrayidx16, align 4, !tbaa !3\l  %mul27 = fmul float %call23, %manupa8\l  store float %mul27, float* %arrayidx16, align 4, !tbaa !3\l  %manupa9 = load float, float* %arrayidx19, align 4, !tbaa !3\l  %mul29 = fmul float %call23, %manupa9\l  store float %mul29, float* %arrayidx19, align 4, !tbaa !3\l  %manupa10 = load float, float* %arrayidx14, align 4, !tbaa !3\l  %call31 = tail call i32 @float_to_fr32(float %manupa10)\l  %arrayidx32 = getelementptr inbounds i32, i32* %vla3, i32 %iter.0684\l  store i32 %call31, i32* %arrayidx32, align 4, !tbaa !7\l  %manupa11 = load float, float* %arrayidx16, align 4, !tbaa !3\l  %call34 = tail call i32 @float_to_fr32(float %manupa11)\l  %arrayidx35 = getelementptr inbounds i32, i32* %vla4, i32 %iter.0684\l  store i32 %call34, i32* %arrayidx35, align 4, !tbaa !7\l  %call37 = tail call i32 @float_to_fr32(float %mul29)\l  %arrayidx38 = getelementptr inbounds i32, i32* %vla5, i32 %iter.0684\l  store i32 %call37, i32* %arrayidx38, align 4, !tbaa !7\l  %arrayidx39 = getelementptr inbounds float, float* %gxf, i32 %iter.0684\l  %manupa12 = load float, float* %arrayidx39, align 4, !tbaa !3\l  %mul40 = fmul float %manupa12, 0x3FB65718E0000000\l  store float %mul40, float* %arrayidx39, align 4, !tbaa !3\l  %arrayidx41 = getelementptr inbounds float, float* %gyf, i32 %iter.0684\l  %manupa13 = load float, float* %arrayidx41, align 4, !tbaa !3\l  %mul42 = fmul float %manupa13, 0x3FB65718E0000000\l  store float %mul42, float* %arrayidx41, align 4, !tbaa !3\l  %arrayidx43 = getelementptr inbounds float, float* %gzf, i32 %iter.0684\l  %manupa14 = load float, float* %arrayidx43, align 4, !tbaa !3\l  %mul44 = fmul float %manupa14, 0x3FB65718E0000000\l  store float %mul44, float* %arrayidx43, align 4, !tbaa !3\l  %manupa15 = load float, float* %arrayidx39, align 4, !tbaa !3\l  %conv = fptosi float %manupa15 to i32\l  %arrayidx46 = getelementptr inbounds i32, i32* %vla, i32 %iter.0684\l  store i32 %conv, i32* %arrayidx46, align 4, !tbaa !7\l  %manupa16 = load float, float* %arrayidx41, align 4, !tbaa !3\l  %conv48 = fptosi float %manupa16 to i32\l  %arrayidx49 = getelementptr inbounds i32, i32* %vla1, i32 %iter.0684\l  store i32 %conv48, i32* %arrayidx49, align 4, !tbaa !7\l  %conv51 = fptosi float %mul44 to i32\l  %arrayidx52 = getelementptr inbounds i32, i32* %vla2, i32 %iter.0684\l  store i32 %conv51, i32* %arrayidx52, align 4, !tbaa !7\l  %inc54 = add nuw nsw i32 %iter.0684, 1\l  %exitcond686 = icmp eq i32 %inc54, %length\l  br i1 %exitcond686, label %for.body61.preheader, label %for.body13\l|{<s0>T|<s1>F}}"];
	Node0x55b758233b00:s0 -> Node0x55b758233b50;
	Node0x55b758233b00:s1 -> Node0x55b758233b00;
	Node0x55b758233b50 [shape=record,label="{for.body61.preheader:                             \l  br label %for.body61\l}"];
	Node0x55b758233b50 -> Node0x55b758233c40;
	Node0x55b758233ba0 [shape=record,label="{for.cond.cleanup60.loopexit:                      \l  %shr322.lcssa = phi i32 [ %shr322, %for.body61 ]\l  %shr323.lcssa = phi i32 [ %shr323, %for.body61 ]\l  %shr324.lcssa = phi i32 [ %shr324, %for.body61 ]\l  %shr325.lcssa = phi i32 [ %shr325, %for.body61 ]\l  br label %for.cond.cleanup60\l}"];
	Node0x55b758233ba0 -> Node0x55b758233bf0;
	Node0x55b758233bf0 [shape=record,label="{for.cond.cleanup60:                               \l  %q3_int.0.lcssa = phi i32 [ %call9, %for.cond.cleanup ], [ %shr325.lcssa,\l... %for.cond.cleanup60.loopexit ]\l  %q2_int.0.lcssa = phi i32 [ %call8, %for.cond.cleanup ], [ %shr324.lcssa,\l... %for.cond.cleanup60.loopexit ]\l  %q1_int.0.lcssa = phi i32 [ %call7, %for.cond.cleanup ], [ %shr323.lcssa,\l... %for.cond.cleanup60.loopexit ]\l  %q0_int.0.lcssa = phi i32 [ %call, %for.cond.cleanup ], [ %shr322.lcssa,\l... %for.cond.cleanup60.loopexit ]\l  %call329 = tail call float @fr32_to_float(i32 %q0_int.0.lcssa)\l  store volatile float %call329, float* @q0, align 4, !tbaa !3\l  %call330 = tail call float @fr32_to_float(i32 %q1_int.0.lcssa)\l  store volatile float %call330, float* @q1, align 4, !tbaa !3\l  %call331 = tail call float @fr32_to_float(i32 %q2_int.0.lcssa)\l  store volatile float %call331, float* @q2, align 4, !tbaa !3\l  %call332 = tail call float @fr32_to_float(i32 %q3_int.0.lcssa)\l  store volatile float %call332, float* @q3, align 4, !tbaa !3\l  %manupa17 = load volatile float, float* @q0, align 4, !tbaa !3\l  %manupa18 = load volatile float, float* @q0, align 4, !tbaa !3\l  %mul333 = fmul float %manupa17, %manupa18\l  %manupa19 = load volatile float, float* @q1, align 4, !tbaa !3\l  %manupa20 = load volatile float, float* @q1, align 4, !tbaa !3\l  %mul334 = fmul float %manupa19, %manupa20\l  %add335 = fadd float %mul333, %mul334\l  %manupa21 = load volatile float, float* @q2, align 4, !tbaa !3\l  %manupa22 = load volatile float, float* @q2, align 4, !tbaa !3\l  %mul336 = fmul float %manupa21, %manupa22\l  %add337 = fadd float %add335, %mul336\l  %manupa23 = load volatile float, float* @q3, align 4, !tbaa !3\l  %manupa24 = load volatile float, float* @q3, align 4, !tbaa !3\l  %mul338 = fmul float %manupa23, %manupa24\l  %add339 = fadd float %add337, %mul338\l  %call340 = tail call float @invSqrt(float %add339)\l  %manupa25 = load volatile float, float* @q0, align 4, !tbaa !3\l  %mul341 = fmul float %call340, %manupa25\l  store volatile float %mul341, float* @q0, align 4, !tbaa !3\l  %manupa26 = load volatile float, float* @q1, align 4, !tbaa !3\l  %mul342 = fmul float %call340, %manupa26\l  store volatile float %mul342, float* @q1, align 4, !tbaa !3\l  %manupa27 = load volatile float, float* @q2, align 4, !tbaa !3\l  %mul343 = fmul float %call340, %manupa27\l  store volatile float %mul343, float* @q2, align 4, !tbaa !3\l  %manupa28 = load volatile float, float* @q3, align 4, !tbaa !3\l  %mul344 = fmul float %call340, %manupa28\l  store volatile float %mul344, float* @q3, align 4, !tbaa !3\l  %manupa29 = load volatile float, float* @q0, align 4, !tbaa !3\l  %manupa30 = load volatile float, float* @q1, align 4, !tbaa !3\l  %mul345 = fmul float %manupa29, %manupa30\l  %manupa31 = load volatile float, float* @q2, align 4, !tbaa !3\l  %mul346 = fmul float %mul345, %manupa31\l  %manupa32 = load volatile float, float* @q3, align 4, !tbaa !3\l  %mul347 = fmul float %mul346, %manupa32\l  %conv348 = fptosi float %mul347 to i32\l  ret i32 %conv348\l}"];
	Node0x55b758233c40 [shape=record,label="{for.body61:                                       \l  %q0_int.0679 = phi i32 [ %shr322, %for.body61 ], [ %call,\l... %for.body61.preheader ]\l  %q1_int.0678 = phi i32 [ %shr323, %for.body61 ], [ %call7,\l... %for.body61.preheader ]\l  %q2_int.0677 = phi i32 [ %shr324, %for.body61 ], [ %call8,\l... %for.body61.preheader ]\l  %q3_int.0676 = phi i32 [ %shr325, %for.body61 ], [ %call9,\l... %for.body61.preheader ]\l  %i56.0675 = phi i32 [ %inc327, %for.body61 ], [ 0, %for.body61.preheader ]\l  %call62 = tail call i32 bitcast (i32 (...)* @please_map_me to i32 ()*)() #9\l  %arrayidx64 = getelementptr inbounds i32, i32* %vla, i32 %i56.0675\l  %manupa33 = load i32, i32* %arrayidx64, align 4, !tbaa !7\l  %mul65 = mul i32 %manupa33, %q1_int.0678\l  %arrayidx66 = getelementptr inbounds i32, i32* %vla1, i32 %i56.0675\l  %manupa34 = load i32, i32* %arrayidx66, align 4, !tbaa !7\l  %mul67.neg = mul i32 %manupa34, %q2_int.0677\l  %arrayidx69 = getelementptr inbounds i32, i32* %vla2, i32 %i56.0675\l  %manupa35 = load i32, i32* %arrayidx69, align 4, !tbaa !7\l  %mul70.neg = mul i32 %manupa35, %q3_int.0676\l  %mul73 = mul nsw i32 %manupa33, %q0_int.0679\l  %mul75 = mul nsw i32 %manupa35, %q2_int.0677\l  %mul78 = mul nsw i32 %manupa34, %q3_int.0676\l  %mul81 = mul nsw i32 %manupa34, %q0_int.0679\l  %mul83 = mul nsw i32 %manupa35, %q1_int.0678\l  %mul86 = mul nsw i32 %manupa33, %q3_int.0676\l  %mul89 = mul nsw i32 %manupa35, %q0_int.0679\l  %mul91 = mul nsw i32 %manupa34, %q1_int.0678\l  %mul94 = mul nsw i32 %manupa33, %q2_int.0677\l  %mul96 = shl nsw i32 %q0_int.0679, 1\l  %mul97 = shl nsw i32 %q1_int.0678, 1\l  %mul98 = shl nsw i32 %q2_int.0677, 1\l  %mul99 = shl nsw i32 %q3_int.0676, 1\l  %mul100 = shl nsw i32 %q0_int.0679, 2\l  %mul101 = shl nsw i32 %q1_int.0678, 2\l  %mul102 = shl nsw i32 %q2_int.0677, 2\l  %mul103 = shl nsw i32 %q3_int.0676, 2\l  %mul104 = shl nsw i32 %q1_int.0678, 3\l  %mul105 = shl nsw i32 %q2_int.0677, 3\l  %mul106 = mul nsw i32 %q0_int.0679, %q0_int.0679\l  %manupa36 = lshr i32 %mul106, 15\l  %mul108 = mul nsw i32 %q1_int.0678, %q1_int.0678\l  %manupa37 = lshr i32 %mul108, 15\l  %mul112 = mul nsw i32 %q2_int.0677, %q2_int.0677\l  %manupa38 = lshr i32 %mul112, 15\l  %mul116 = mul nsw i32 %q3_int.0676, %q3_int.0676\l  %manupa39 = lshr i32 %mul116, 15\l  %arrayidx120 = getelementptr inbounds i32, i32* %vla3, i32 %i56.0675\l  %manupa40 = load i32, i32* %arrayidx120, align 4, !tbaa !7\l  %mul121 = mul nsw i32 %manupa40, %mul98\l  %arrayidx125 = getelementptr inbounds i32, i32* %vla4, i32 %i56.0675\l  %manupa41 = load i32, i32* %arrayidx125, align 4, !tbaa !7\l  %mul126 = mul nsw i32 %manupa41, %mul97\l  %reass.add = add nuw nsw i32 %manupa37, %manupa38\l  %reass.mul = mul i32 %reass.add, %mul100\l  %add124 = add i32 %mul121, %reass.mul\l  %sub127 = sub i32 %add124, %mul126\l  %mul130.neg = mul i32 %manupa40, %mul99\l  %mul135.neg = mul i32 %manupa41, %mul96\l  %arrayidx142 = getelementptr inbounds i32, i32* %vla5, i32 %i56.0675\l  %manupa42 = load i32, i32* %arrayidx142, align 4, !tbaa !7\l  %reass.add655 = add nuw nsw i32 %manupa36, %manupa39\l  %reass.add656 = add i32 %reass.add655, %manupa42\l  %reass.mul657 = mul i32 %reass.add656, %mul101\l  %reass.mul659 = mul i32 %reass.add, %mul104\l  %reass.add667 = add i32 %mul135.neg, %mul130.neg\l  %add139 = sub i32 %reass.mul659, %mul101\l  %add141 = add i32 %add139, %reass.mul657\l  %add144 = sub i32 %add141, %reass.add667\l  %mul147 = mul nsw i32 %manupa40, %mul96\l  %mul152 = mul nsw i32 %manupa41, %mul99\l  %reass.mul662 = mul i32 %reass.add656, %mul102\l  %reass.mul664 = mul i32 %reass.add, %mul105\l  %sub154 = sub i32 %reass.mul664, %mul102\l  %add156 = add i32 %sub154, %mul147\l  %add158 = sub i32 %add156, %mul152\l  %add161 = add i32 %add158, %reass.mul662\l  %mul164.neg = mul i32 %manupa40, %mul97\l  %mul169.neg = mul i32 %manupa41, %mul98\l  %reass.mul666 = mul i32 %reass.add, %mul103\l  %reass.add669 = add i32 %mul169.neg, %mul164.neg\l  %sub170 = sub i32 %reass.mul666, %reass.add669\l  %shr171 = ashr i32 %sub127, 15\l  %shr172 = ashr i32 %add144, 15\l  %shr173 = ashr i32 %add161, 15\l  %shr174 = ashr i32 %sub170, 15\l  %shr175 = ashr i32 %sub127, 31\l  %xor = xor i32 %shr171, %shr175\l  %sub177 = sub nsw i32 %xor, %shr175\l  %shr178 = ashr i32 %add144, 31\l  %xor179 = xor i32 %shr172, %shr178\l  %sub181 = sub nsw i32 %xor179, %shr178\l  %sub182 = sub nsw i32 %sub181, %sub177\l  %shr183 = ashr i32 %sub182, 31\l  %and = and i32 %shr183, %sub182\l  %add185 = add nsw i32 %and, %sub177\l  %add186 = add nsw i32 %sub181, %sub177\l  %shr187 = ashr i32 %add185, 1\l  %sub188 = sub nsw i32 %add186, %shr187\l  %shr189 = ashr i32 %add185, 2\l  %sub190 = sub i32 %sub188, %shr189\l  %shr191 = ashr i32 %add185, 4\l  %add192 = add nsw i32 %sub190, %shr191\l  %shr193 = ashr i32 %add161, 31\l  %xor194 = xor i32 %shr173, %shr193\l  %sub196 = sub nsw i32 %xor194, %shr193\l  %shr197 = ashr i32 %sub170, 31\l  %xor198 = xor i32 %shr174, %shr197\l  %sub200 = sub nsw i32 %xor198, %shr197\l  %sub201 = sub nsw i32 %sub200, %sub196\l  %shr202 = ashr i32 %sub201, 31\l  %and204 = and i32 %shr202, %sub201\l  %add205 = add nsw i32 %and204, %sub196\l  %add206 = add nsw i32 %sub196, %sub200\l  %shr207 = ashr i32 %add205, 1\l  %sub208 = sub nsw i32 %add206, %shr207\l  %shr209 = ashr i32 %add205, 2\l  %sub210 = sub i32 %sub208, %shr209\l  %shr211 = ashr i32 %add205, 4\l  %add212 = add nsw i32 %sub210, %shr211\l  %sub213 = sub nsw i32 %add212, %add192\l  %shr214 = ashr i32 %sub213, 31\l  %and216 = and i32 %shr214, %sub213\l  %add217 = add nsw i32 %and216, %add192\l  %add218 = add nsw i32 %add192, %add212\l  %shr219 = ashr i32 %add217, 1\l  %sub220 = sub i32 %add218, %shr219\l  %shr221 = ashr i32 %add217, 2\l  %sub222 = sub i32 %sub220, %shr221\l  %shr223 = ashr i32 %add217, 4\l  %add224 = add nsw i32 %sub222, %shr223\l  %shr225 = ashr i32 %add224, 1\l  %or = or i32 %shr225, %add224\l  %shr226 = ashr i32 %or, 2\l  %or227 = or i32 %shr226, %or\l  %shr228 = ashr i32 %or227, 4\l  %or229 = or i32 %shr228, %or227\l  %shr230 = ashr i32 %or229, 8\l  %or231 = or i32 %shr230, %or229\l  %shr232 = ashr i32 %or231, 16\l  %or233 = or i32 %shr232, %or231\l  %mul234 = mul i32 %or233, 130329821\l  %shr235 = lshr i32 %mul234, 27\l  %arrayidx236 = getelementptr inbounds [32 x i32], [32 x i32]*\l... @MadgwickAHRSupdateIMU.MultiplyDeBruijnBitPosition, i32 0, i32 %shr235\l  %manupa43 = load i32, i32* %arrayidx236, align 4, !tbaa !7\l  %shr237 = ashr i32 %shr171, %manupa43\l  %shr238 = ashr i32 %shr172, %manupa43\l  %shr239 = ashr i32 %shr173, %manupa43\l  %shr240 = ashr i32 %shr174, %manupa43\l  %reass.add671 = add i32 %mul67.neg, %mul65\l  %reass.add672 = add i32 %reass.add671, %mul70.neg\l  %manupa44 = add i32 %reass.add672, %shr237\l  %sub241 = sub i32 0, %manupa44\l  %add76 = sub i32 %mul73, %mul78\l  %sub79 = add i32 %add76, %mul75\l  %sub242 = sub i32 %sub79, %shr238\l  %sub84 = add i32 %mul81, %mul86\l  %add87 = sub i32 %sub84, %mul83\l  %sub243 = sub i32 %add87, %shr239\l  %add92 = sub i32 %mul91, %mul94\l  %sub95 = add i32 %add92, %mul89\l  %sub244 = sub i32 %sub95, %shr240\l  %mul245 = mul nsw i32 %q0_int.0679, 10\l  %shr246 = ashr i32 %sub241, 9\l  %add247 = add nsw i32 %shr246, %mul245\l  %mul248 = mul nsw i32 %q1_int.0678, 10\l  %shr249 = ashr i32 %sub242, 9\l  %add250 = add nsw i32 %shr249, %mul248\l  %mul251 = mul nsw i32 %q2_int.0677, 10\l  %shr252 = ashr i32 %sub243, 9\l  %add253 = add nsw i32 %shr252, %mul251\l  %mul254 = mul nsw i32 %q3_int.0676, 10\l  %shr255 = ashr i32 %sub244, 9\l  %add256 = add nsw i32 %shr255, %mul254\l  %manupa45 = icmp slt i32 %add247, 0\l  %manupa46 = sub nsw i32 0, %add247\l  %sub260 = select i1 %manupa45, i32 %manupa46, i32 %add247\l  %manupa47 = icmp slt i32 %add250, 0\l  %manupa48 = sub nsw i32 0, %add250\l  %sub264 = select i1 %manupa47, i32 %manupa48, i32 %add250\l  %sub265 = sub nsw i32 %sub264, %sub260\l  %shr266 = ashr i32 %sub265, 31\l  %and268 = and i32 %shr266, %sub265\l  %add269 = add nsw i32 %and268, %sub260\l  %add270 = add nuw nsw i32 %sub264, %sub260\l  %shr271 = ashr i32 %add269, 1\l  %sub272 = sub i32 %add270, %shr271\l  %shr273 = ashr i32 %add269, 2\l  %sub274 = sub i32 %sub272, %shr273\l  %shr275 = ashr i32 %add269, 4\l  %add276 = add nsw i32 %sub274, %shr275\l  %manupa49 = icmp slt i32 %add253, 0\l  %manupa50 = sub nsw i32 0, %add253\l  %sub280 = select i1 %manupa49, i32 %manupa50, i32 %add253\l  %manupa51 = icmp slt i32 %add256, 0\l  %manupa52 = sub nsw i32 0, %add256\l  %sub284 = select i1 %manupa51, i32 %manupa52, i32 %add256\l  %sub285 = sub nsw i32 %sub284, %sub280\l  %shr286 = ashr i32 %sub285, 31\l  %and288 = and i32 %shr286, %sub285\l  %add289 = add nsw i32 %and288, %sub280\l  %add290 = add nuw nsw i32 %sub280, %sub284\l  %shr291 = ashr i32 %add289, 1\l  %sub292 = sub i32 %add290, %shr291\l  %shr293 = ashr i32 %add289, 2\l  %sub294 = sub i32 %sub292, %shr293\l  %shr295 = ashr i32 %add289, 4\l  %add296 = add nsw i32 %sub294, %shr295\l  %sub297 = sub nsw i32 %add296, %add276\l  %shr298 = ashr i32 %sub297, 31\l  %and300 = and i32 %shr298, %sub297\l  %add301 = add nsw i32 %and300, %add276\l  %add302 = add nsw i32 %add276, %add296\l  %shr303 = ashr i32 %add301, 1\l  %sub304 = sub i32 %add302, %shr303\l  %shr305 = ashr i32 %add301, 2\l  %sub306 = sub i32 %sub304, %shr305\l  %shr307 = ashr i32 %add301, 4\l  %add308 = add nsw i32 %sub306, %shr307\l  %shr309 = ashr i32 %add308, 1\l  %or310 = or i32 %shr309, %add308\l  %shr311 = ashr i32 %or310, 2\l  %or312 = or i32 %shr311, %or310\l  %shr313 = ashr i32 %or312, 4\l  %or314 = or i32 %shr313, %or312\l  %shr315 = ashr i32 %or314, 8\l  %or316 = or i32 %shr315, %or314\l  %shr317 = ashr i32 %or316, 16\l  %or318 = or i32 %shr317, %or316\l  %mul319 = mul i32 %or318, 130329821\l  %shr320 = lshr i32 %mul319, 27\l  %arrayidx321 = getelementptr inbounds [32 x i32], [32 x i32]*\l... @MadgwickAHRSupdateIMU.MultiplyDeBruijnBitPosition, i32 0, i32 %shr320\l  %manupa53 = load i32, i32* %arrayidx321, align 4, !tbaa !7\l  %shr322 = ashr i32 %add247, %manupa53\l  %shr323 = ashr i32 %add250, %manupa53\l  %shr324 = ashr i32 %add253, %manupa53\l  %shr325 = ashr i32 %add256, %manupa53\l  %inc327 = add nuw nsw i32 %i56.0675, 1\l  %exitcond = icmp eq i32 %inc327, %length\l  br i1 %exitcond, label %for.cond.cleanup60.loopexit, label %for.body61\l|{<s0>T|<s1>F}}"];
	Node0x55b758233c40:s0 -> Node0x55b758233ba0;
	Node0x55b758233c40:s1 -> Node0x55b758233c40;
}
